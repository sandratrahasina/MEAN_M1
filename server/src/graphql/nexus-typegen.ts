/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CommandeDetailsInput: { // input type
    menuId: string; // String!
    quantite?: number | null; // Int
  }
}

export interface NexusGenEnums {
  Etat: "ANNULEE" | "ATTENTE" | "LIVREE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  Upload: any
}

export interface NexusGenObjects {
  Client: { // root type
    adresse?: string | null; // String
    commandes?: Array<NexusGenRootTypes['Commande'] | null> | null; // [Commande]
    id: string; // String!
    nom?: string | null; // String
    photoUrl?: string | null; // String
    prenom?: string | null; // String
  }
  Commande: { // root type
    client?: NexusGenRootTypes['Client'] | null; // Client
    date?: NexusGenScalars['Date'] | null; // Date
    details?: Array<NexusGenRootTypes['CommandeDetails'] | null> | null; // [CommandeDetails]
    etat?: NexusGenEnums['Etat'] | null; // Etat
    id?: string | null; // String
    livreur?: NexusGenRootTypes['Livreur'] | null; // Livreur
  }
  CommandeDetails: { // root type
    menu?: NexusGenRootTypes['MenuReturnedType'] | null; // MenuReturnedType
    quantite?: number | null; // Int
  }
  File: { // root type
    encoding: string; // String!
    filename: string; // String!
    mimetype: string; // String!
  }
  Livreur: { // root type
    id: string; // String!
    livraisons?: Array<NexusGenRootTypes['Commande'] | null> | null; // [Commande]
    nom?: string | null; // String
    prenom?: string | null; // String
  }
  Menu: { // root type
    id?: string | null; // String
    nom?: string | null; // String
    photoUrl?: string | null; // String
    prix?: number | null; // Int
    restaurant?: NexusGenRootTypes['Restaurant'] | null; // Restaurant
    visible?: boolean | null; // Boolean
  }
  MenuReturnedType: { // root type
    id?: string | null; // String
    nom?: string | null; // String
    photoUrl?: string | null; // String
    prix?: number | null; // Int
    restaurant?: NexusGenRootTypes['Restaurant'] | null; // Restaurant
  }
  Mutation: {};
  Query: {};
  Restaurant: { // root type
    adresse?: string | null; // String
    description?: string | null; // String
    id: string; // String!
    nom: string; // String!
    photoUrl?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Client: { // field return type
    adresse: string | null; // String
    commandes: Array<NexusGenRootTypes['Commande'] | null> | null; // [Commande]
    id: string; // String!
    nom: string | null; // String
    photoUrl: string | null; // String
    prenom: string | null; // String
  }
  Commande: { // field return type
    client: NexusGenRootTypes['Client'] | null; // Client
    date: NexusGenScalars['Date'] | null; // Date
    details: Array<NexusGenRootTypes['CommandeDetails'] | null> | null; // [CommandeDetails]
    etat: NexusGenEnums['Etat'] | null; // Etat
    id: string | null; // String
    livreur: NexusGenRootTypes['Livreur'] | null; // Livreur
  }
  CommandeDetails: { // field return type
    menu: NexusGenRootTypes['MenuReturnedType'] | null; // MenuReturnedType
    quantite: number | null; // Int
  }
  File: { // field return type
    encoding: string; // String!
    filename: string; // String!
    mimetype: string; // String!
  }
  Livreur: { // field return type
    id: string; // String!
    livraisons: Array<NexusGenRootTypes['Commande'] | null> | null; // [Commande]
    nom: string | null; // String
    prenom: string | null; // String
  }
  Menu: { // field return type
    id: string | null; // String
    nom: string | null; // String
    photoUrl: string | null; // String
    prix: number | null; // Int
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
    visible: boolean | null; // Boolean
  }
  MenuReturnedType: { // field return type
    id: string | null; // String
    nom: string | null; // String
    photoUrl: string | null; // String
    prix: number | null; // Int
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
  }
  Mutation: { // field return type
    cancelOrder: NexusGenRootTypes['Commande'] | null; // Commande
    changeMenuVisibility: NexusGenRootTypes['Menu'] | null; // Menu
    createMenu: NexusGenRootTypes['Menu'] | null; // Menu
    deleteMenu: NexusGenRootTypes['Menu'] | null; // Menu
    deliverOrder: NexusGenRootTypes['Commande'] | null; // Commande
    makeOrder: NexusGenRootTypes['Commande'] | null; // Commande
    updateMenu: NexusGenRootTypes['Menu'] | null; // Menu
  }
  Query: { // field return type
    menus: Array<NexusGenRootTypes['MenuReturnedType'] | null> | null; // [MenuReturnedType]
    menusByRestaurant: Array<NexusGenRootTypes['Menu'] | null> | null; // [Menu]
    myCommands: Array<NexusGenRootTypes['Commande'] | null> | null; // [Commande]
    myMenus: Array<NexusGenRootTypes['Menu'] | null> | null; // [Menu]
    receivedCommands: Array<NexusGenRootTypes['Commande'] | null> | null; // [Commande]
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
    restaurants: Array<NexusGenRootTypes['Restaurant'] | null> | null; // [Restaurant]
  }
  Restaurant: { // field return type
    adresse: string | null; // String
    description: string | null; // String
    id: string; // String!
    nom: string; // String!
    photoUrl: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Client: { // field return type name
    adresse: 'String'
    commandes: 'Commande'
    id: 'String'
    nom: 'String'
    photoUrl: 'String'
    prenom: 'String'
  }
  Commande: { // field return type name
    client: 'Client'
    date: 'Date'
    details: 'CommandeDetails'
    etat: 'Etat'
    id: 'String'
    livreur: 'Livreur'
  }
  CommandeDetails: { // field return type name
    menu: 'MenuReturnedType'
    quantite: 'Int'
  }
  File: { // field return type name
    encoding: 'String'
    filename: 'String'
    mimetype: 'String'
  }
  Livreur: { // field return type name
    id: 'String'
    livraisons: 'Commande'
    nom: 'String'
    prenom: 'String'
  }
  Menu: { // field return type name
    id: 'String'
    nom: 'String'
    photoUrl: 'String'
    prix: 'Int'
    restaurant: 'Restaurant'
    visible: 'Boolean'
  }
  MenuReturnedType: { // field return type name
    id: 'String'
    nom: 'String'
    photoUrl: 'String'
    prix: 'Int'
    restaurant: 'Restaurant'
  }
  Mutation: { // field return type name
    cancelOrder: 'Commande'
    changeMenuVisibility: 'Menu'
    createMenu: 'Menu'
    deleteMenu: 'Menu'
    deliverOrder: 'Commande'
    makeOrder: 'Commande'
    updateMenu: 'Menu'
  }
  Query: { // field return type name
    menus: 'MenuReturnedType'
    menusByRestaurant: 'Menu'
    myCommands: 'Commande'
    myMenus: 'Menu'
    receivedCommands: 'Commande'
    restaurant: 'Restaurant'
    restaurants: 'Restaurant'
  }
  Restaurant: { // field return type name
    adresse: 'String'
    description: 'String'
    id: 'String'
    nom: 'String'
    photoUrl: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    cancelOrder: { // args
      commandeId: string; // String!
    }
    changeMenuVisibility: { // args
      menuId: string; // String!
      visible: boolean; // Boolean!
    }
    createMenu: { // args
      imageFile?: NexusGenScalars['Upload'] | null; // Upload
      nom: string; // String!
      prix: number; // Int!
      visible?: boolean | null; // Boolean
    }
    deleteMenu: { // args
      menuId: string; // String!
    }
    deliverOrder: { // args
      commandeId: string; // String!
    }
    makeOrder: { // args
      menus: NexusGenInputs['CommandeDetailsInput'][]; // [CommandeDetailsInput!]!
    }
    updateMenu: { // args
      menuId: string; // String!
      nom?: string | null; // String
      prix?: number | null; // Int
    }
  }
  Query: {
    menusByRestaurant: { // args
      restaurantId: string; // String!
    }
    restaurant: { // args
      restaurantId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}